local m = require "main.model"

local function put_food(food)
	tilemap.set_tile("#grid", "layer1", food.x, food.y, 3)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(socket.gettime())

	self.state = m.new_state(48)
	put_food(self.state.food)
end

function update(self, dt)
	self.state = m.tick(self.state, dt)

	if (self.state.removed_tail) then
		local tail = self.state.removed_tail
		tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
	end

	if (self.state.moved_food) then
		put_food(self.state.food)
	end

	for i, s in ipairs(self.state.segments) do
		tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
	end
end

local function toggle_profiler(self)
	self.enable_ui = not self.enable_ui
	profiler.enable_ui(self.enable_ui)
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.state.dirqueue, { x = 0, y = 1 })
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.state.dirqueue, { x = 0, y = -1 })
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.state.dirqueue, { x = -1, y = 0 })
	elseif action_id == hash("right") and action.pressed then
		table.insert(self.state.dirqueue, { x = 1, y = 0 })
	elseif action_id == hash("profiler") and action.pressed then
		-- todo only include this in debug builds
		toggle_profiler(self)
	end
end
