function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24} }
		self.dir = {x = 1, y = 0}
		self.dirqueue = {}
		self.speed = 7.0

		self.t = 0
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.t = self.t + dt
	if self.t >= 1.0 / self.speed then
		local newdir = table.remove(self.dirqueue, 1)
		if newdir then
			local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
			if not opposite then
				self.dir = newdir
			end
		end

		local head = self.segments[#self.segments]
		local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

		table.insert(self.segments, newhead)

		local tail = table.remove(self.segments, 1)
		tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 0)

		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
		end

		self.t = 0
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = 1})
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = -1})
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirqueue, {x = -1, y = 0})
	elseif action_id == hash("right") and action.pressed then
		table.insert(self.dirqueue, {x = 1, y = 0})
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
